module regPrzes(
	input clk,
	input[7:0] sin,
	input[7:0] rec,
	input[4:0] tim,
	
	output[7:0] out
);

reg[19:0] bit1;
reg[19:0] bit2;
reg[19:0] bit3;
reg[19:0] bit4;
reg[19:0] bit5;
reg[19:0] bit6;
reg[19:0] bit7;
reg[19:0] bit8;

reg[19:0] mbit1;
reg[19:0] mbit2;
reg[19:0] mbit3;
reg[19:0] mbit4;
reg[19:0] mbit5;
reg[19:0] mbit6;
reg[19:0] mbit7;
reg[19:0] mbit8;

reg[4:0] tim;
reg[4:0] ntim;

reg[7:0] outr;

always@(posedge clk)begin
	bit1 <= mbit1;
	bit2 <= mbit2;
	bit3 <= mbit3;
	bit4 <= mbit4;
	bit5 <= mbit5;
	bit6 <= mbit6;
	bit7 <= mbit7;
	bit8 <= mbit8;
	ntim <= tim;
end

always@(*)begin
	mbit1 = bit1 << 1;
	mbit1[0] = rec[0];
end

always@(*)begin
	mbit2 = bit2 << 1;
	mbit2[0] = rec[1];
end

always@(*)begin
	mbit3 = bit3 << 1;
	mbit3[0] = rec[2];
end

always@(*)begin
	mbit4 = bit4 << 1;
	mbit4[0] = rec[3];
end

always@(*)begin
	mbit5 = bit5 << 1;
	mbit5[0] = rec[4];
end

always@(*)begin
	mbit6 = bit6 << 1;
	mbit6[0] = rec[5];
end

always@(*)begin
	mbit7 = bit7 << 1;
	mbit7[0] = rec[6];
end

always@(*)begin
	mbit8 = bit8 << 1;
	mbit8[0] = rec[7];
end

always@(*)begin
	case(tim)
		5'd0: outr = {bit1[0], bit2[0], bit3[0], bit4[0], bit5[0], bit6[0], bit7[0], bit8[0]};
		5'd1: outr = {bit1[1], bit2[1], bit3[1], bit4[1], bit5[1], bit6[1], bit7[1], bit8[1]};
		5'd2: outr = {bit1[2], bit2[2], bit3[2], bit4[2], bit5[2], bit6[2], bit7[2], bit8[2]};
		5'd3: outr = {bit1[3], bit2[3], bit3[3], bit4[3], bit5[3], bit6[3], bit7[3], bit8[3]};
		5'd4: outr = {bit1[4], bit2[4], bit3[4], bit4[4], bit5[4], bit6[4], bit7[4], bit8[4]};
		5'd5: outr = {bit1[5], bit2[5], bit3[5], bit4[5], bit5[5], bit6[5], bit7[5], bit8[5]};
		5'd6: outr = {bit1[6], bit2[6], bit3[6], bit4[6], bit5[6], bit6[6], bit7[6], bit8[6]};
		5'd7: outr = {bit1[7], bit2[7], bit3[7], bit4[7], bit5[7], bit6[7], bit7[7], bit8[7]};
		5'd8: outr = {bit1[8], bit2[8], bit3[8], bit4[8], bit5[8], bit6[8], bit7[8], bit8[8]};
		5'd9: outr = {bit1[9], bit2[9], bit3[9], bit4[9], bit5[9], bit6[9], bit7[9], bit8[9]};
		5'd10: outr = {bit1[10], bit2[10], bit3[10], bit4[10], bit5[10], bit6[10], bit7[10], bit8[10]};
		5'd11: outr = {bit1[11], bit2[11], bit3[11], bit4[11], bit5[11], bit6[11], bit7[11], bit8[11]};
		5'd12: outr = {bit1[12], bit2[12], bit3[12], bit4[12], bit5[12], bit6[12], bit7[12], bit8[12]};
		5'd13: outr = {bit1[13], bit2[13], bit3[13], bit4[13], bit5[13], bit6[13], bit7[13], bit8[13]};
		5'd14: outr = {bit1[14], bit2[14], bit3[14], bit4[14], bit5[14], bit6[14], bit7[14], bit8[14]};
		5'd15: outr = {bit1[15], bit2[15], bit3[15], bit4[15], bit5[15], bit6[15], bit7[15], bit8[15]};
		5'd16: outr = {bit1[16], bit2[16], bit3[16], bit4[16], bit5[16], bit6[16], bit7[16], bit8[16]};
		5'd17: outr = {bit1[17], bit2[17], bit3[17], bit4[17], bit5[17], bit6[17], bit7[17], bit8[17]};
		5'd18: outr = {bit1[18], bit2[18], bit3[18], bit4[18], bit5[18], bit6[18], bit7[18], bit8[18]};
		5'd19: outr = {bit1[19], bit2[19], bit3[19], bit4[19], bit5[19], bit6[19], bit7[19], bit8[19]};
		default: outr = 8'b0;
	endcase
end


assign out = outr;


endmodule
